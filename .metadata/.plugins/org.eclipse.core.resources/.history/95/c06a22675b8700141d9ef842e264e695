package com.DR.dLib.animations;

import java.util.ArrayList;

import com.DR.dLib.dObject;
import com.DR.dLib.dTweener;

public class SlideInOrderAnimation extends dAnimation {

	private float deltaX = 0;
	private ArrayList<Float> startPos;
	// delay between each object
	private final float ITEM_DELAY = .1f;
	private boolean usesList = false;
	
	/**
	 * Slides in from the side in order from top to bottom
	 * @param duration
	 * @param listener
	 * @param ID
	 * @param objectToAnimate
	 */
	public SlideInOrderAnimation(float duration, AnimationStatusListener listener, int ID, float deltaX, dObject[] objectToAnimate) 
	{
		super(duration, listener, ID, objectToAnimate);
		this.deltaX = deltaX;
		startPos = new ArrayList<Float>();
	}
	
	public SlideInOrderAnimation(float duration, AnimationStatusListener listener, int ID, float deltaX, ArrayList<dObject> objects)
	{
		super(duration, listener, ID, objects);
		this.deltaX = deltaX;
		startPos = new ArrayList<Float>();
		usesList = true;
	}

	@Override
	protected void animate(float time, float duration, float delta) 
	{
		if(usesList == false)
		{
			for(int x = 0; x < getAnimatedObjects().length; x++)
			{
				if(time - x * ITEM_DELAY >= 0)
				{
					getAnimatedObjects()[x].setX(dTweener.ElasticOut(time - x * ITEM_DELAY, startPos.get(x), deltaX, duration - x * ITEM_DELAY, 6f));
				}
			}
		}
		else
		{
			for(int x = 0; x < getAnimatedObjectsList().size(); x++)
			{
				if(time - x * ITEM_DELAY >= 0)
				{
					getAnimatedObjectsList().get(x).setX(dTweener.ElasticOut(time - x * ITEM_DELAY, startPos.get(x), deltaX, duration - x * ITEM_DELAY, 6f));
				}
			}
		}
	}
	
	@Override
	public void start()
	{
		super.start();
		startPos.clear();
		if(usesList == false)
		{
			for(int x = 0; x < getAnimatedObjects().length; x++)
			{
				startPos.add(getAnimatedObjects()[x].getX());
			}
		}
		else
		{
			for(int x = 0; x < getAnimatedObjectsList().size(); x++)
			{
				startPos.add(getAnimatedObjects()[x].getX());
			}
		}
	}

}
